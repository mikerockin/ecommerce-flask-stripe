services:
  db:
    image: postgres:17.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=mydata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - db_network
      - web_network
    deploy:
      mode: replicated
      replicas: 1  # БД обычно одна
      placement:
        constraints:
          - node.role == manager  # Размещаем на менеджере для стабильности

  adminer:
    image: adminer
    ports:
      - "127.0.0.1:8080:8080"  # Оставляем привязку к localhost, если нужен доступ только с хоста
    networks:
      - db_network
    depends_on:
      - db
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  appseed-app:
    image: mikerockin1988/ecommerce-flask-stripe-appseed-app:1.0
    restart: always
    networks:
      - db_network
      - web_network
    environment:
      - DATABASE_URL=postgresql://postgres:1234@db:5432/mydata
    depends_on:
      - db
    deploy:
      mode: replicated
      replicas: 3  # Можно масштабировать приложение
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  nginx:
    image: nginx
    restart: always
    ports:
      - "5085:5085"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    networks:
      - web_network
    depends_on:
      - appseed-app
    deploy:
      mode: replicated
      replicas: 1  # Один nginx как точка входа
      placement:
        constraints:
          - node.role == worker

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - web_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  node_exporter:
    image: prom/node-exporter
    command:
      - '--path.rootfs=/host'
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - "9100:9100"
    networks:
      - web_network
    deploy:
      mode: global  # Запускается на каждом узле для мониторинга хоста
      resources:
        limits:
          cpus: "0.2"
          memory: 128M

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:1234@db:5432/mydata?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - db_network
      - web_network
    depends_on:
      - db
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  grafana:
    image: grafana/grafana-oss
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - web_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    ports:
      - "9093:9093"
    networks:
      - web_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

networks:
  db_network:
    driver: overlay
    attachable: true  # Для удобства отладки
  web_network:
    driver: overlay
    attachable: true

volumes:
  postgres-data:
  prometheus_data:
  grafana-storage:
